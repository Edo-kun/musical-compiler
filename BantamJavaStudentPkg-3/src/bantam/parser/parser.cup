/**
 * File: parser.cup
 * @author djskrien
 * @author Victoria Chistolini
 * @author Edward (osan) Zhou
 * @author Alex Rinker
 * @author Vivek Sah
 * Class: CS461
 * Project: 2
 * Date: Feb 21, 2017
 */

/* Bantam Java Compiler and Language Toolset.

   Copyright (C) 2009 by Marc Corliss (corliss@hws.edu) and 
                         David Furcy (furcyd@uwosh.edu) and
                         E Christopher Lewis (lewis@vmware.com).
   ALL RIGHTS RESERVED.

   The Bantam Java toolset is distributed under the following 
   conditions:

     You may make copies of the toolset for your own use and 
     modify those copies.

     All copies of the toolset must retain the author names and 
     copyright notice.

     You may not sell the toolset or distribute it in 
     conjunction with a commerical product or service without 
     the expressed written consent of the authors.

   THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS 
   OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE 
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
   PARTICULAR PURPOSE. 
*/

/* code below is copied to the file containing the bantam.parser */

package bantam.parser;

/* import the AST and utility class files */
import bantam.lexer.*;
import bantam.mast.*;
import bantam.util.ErrorHandler;
/* import Symbol class, which represents the type of token passed
   from the bantam.lexer to the bantam.parser.  Note: in the bantam.lexer package there is
   a file Token.java that  defines a subclass of Symbol called Token,
   which is what is actually passed to the bantam.parser */
import java_cup.runtime.Symbol;

/* the code below is copied to the class containing the context-free
   grammar productions */
action code {: 
    /** object for error handling */
    private ErrorHandler errorHandler = new ErrorHandler();

    /* sets the error handler */
    public ErrorHandler getErrorHandler() {
	return errorHandler;
    }

    /* returns the current line number from the scanner */
    public int getCurrLineNum() {
	return ((Lexer)parser.getScanner()).getCurrLineNum();
    }

    /* returns the current file name from the scanner */
    public String getCurrFilename() {
	return ((Lexer)parser.getScanner()).getCurrFilename();
    }
:} 

/* code below is copied to the Parser class, which drives parsing */
parser code {:
    /**
     * @return the ErrorHandler for this Parser
     */
    public ErrorHandler getErrorHandler() { return action_obj.getErrorHandler(); }

    /** overrides done_parsing in inherited class, called when parsing finishes
      * either after accepting or because of errors
      * */
    public void done_parsing() {
	super.done_parsing();
	// if lexing and/or parsing errors then exit
	action_obj.getErrorHandler().checkErrors();
    }

    /**
     * Generates an appropriate error message based on the
     * input error type
     * @param t the relevant error Token
     */
    private String generateErrorMessage(Token t) {
        String errorMessage = "";
        switch(t.getName()) {
            case "UNTERMINATED_COMMENT":
                errorMessage = "unterminated comment detected";
            case "LARGE_INT":
                errorMessage = (
                    "int value " + t.getAttribute() + "is too large. Bantam Java only " +
                    "supports integers of size 2147483647 (2^32 - 1) or less"
                );
            case "ILLEGAL_ID":
                errorMessage = "illegal id '" + t.getAttribute() + "'";
            case "LARGE_STRING":
                errorMessage = (
                    "Bantam Java Strings cannot exceed 5000 chars." +
                    "Found string of size: " + t.getAttribute()
                );
            case "ILLEGAL_ESCAPE_CHAR":
                errorMessage = "illegal escape char: '" + t.getAttribute() + "'";
            case "MULTILINE_STRING":
                errorMessage = "multiline string detected";
            case "UNTERMINATED_STRING":
                errorMessage = "unterminated string: '" + t.getAttribute() + "'";
            case "ILLEGAL_CHAR":
                errorMessage = "illegal char: '" + t.getAttribute() + "'";
        }
        return errorMessage;
    }

    /** overrides syntax_error in inherited class and handles syntax errors 
      * @param curr current symbol from the bantam.lexer
      * */
    public void syntax_error(Symbol curr) {
	// get token value from the symbol
	Token t = (Token)curr.value;
	
	// get the error handler object
	ErrorHandler errorHandler = action_obj.getErrorHandler();

	// may want to modify and augment the code below for more
	// accurate error reporting
	errorHandler.register(errorHandler.PARSE_ERROR, action_obj.getCurrFilename(), 
			      action_obj.getCurrLineNum(), 
			      "unexpected input near '" + t.getLexeme() + "'");

    // handle lexer errors
    // TODO figure out why "EOF" is detected as a LEX_ERROR whenever any error occurs
    if(t.getName() != "EOF") {
        errorHandler.register(errorHandler.LEX_ERROR, action_obj.getCurrFilename(),
    			      action_obj.getCurrLineNum(),
    			      generateErrorMessage(t));
        }
    }

    /** override error_sync_size in inherited class and
      * change the minimum number of tokens to skip on an error from 3 to 2
      * @return minimum number of tokens to skip on an error
      * */
    protected int error_sync_size() {
	return 2;
    }
:}

/* list of terminals, which correspond to tokens returned by the bantam.lexer */
terminal Token LEX_ERROR;
terminal Token SCORE, LOOP, INSTRUMENT, VOLUME, OCTAVE;
terminal Token PLUS, MINUS;
terminal Token ASSIGN;
terminal Token LPAREN, RPAREN, LBRACE, RBRACE, LSQBRACE, RSQBRACE, LBREAK, RBREAK, BREAK;
terminal Token SEMI, COMMA;
terminal Token ID, INT_CONST, STRING_CONST, NOTE;

/* list of non-terminals used in context-free grammar */
nonterminal Program program;
nonterminal Score score;
nonterminal MemberList member_list;
nonterminal Member member;
nonterminal Field field;
nonterminal StmtList stmt_list;
nonterminal Stmt stmt, loop_stmt, phrase_stmt, call_stmt, block_stmt;
nonterminal MeasureList measure_list;
nonterminal Measure measure;
nonterminal SoundList sound_list;
nonterminal Sound sound;
nonterminal Chord chord;
nonterminal Note note;
nonterminal ExprList expr_list;
nonterminal Expr expr, const_expr, phrase_expr;
nonterminal ConstExpr const_int, const_string, const_var;

/* precedence/associativity rules */

precedence right ASSIGN;
precedence left PLUS,MINUS;

/* program, which is simply a score */
program	
	::= score:sc
	    {: RESULT = new Program(0, sc); :}
        ;

/* a single score */
score
    ::=
		SCORE:t STRING_CONST:name BREAK expr:c LBRACE member_list:ml RBRACE
        {: RESULT = new Score(t.getLineNum(), getCurrFilename(),
                   name.getAttribute(), ml, c); :}
        |
        SCORE:t STRING_CONST:name LBRACE member_list:ml RBRACE
        {: RESULT = new Score(t.getLineNum(), getCurrFilename(),
                   name.getAttribute(), ml, null); :}
    ;
/* member list */
member_list
	::=
	    member:m
	        {: RESULT = (MemberList)(new MemberList(m.getLineNum()).addElement(m)); :}
	    | member_list:ml member:m
	        {: RESULT = (MemberList)ml.addElement(m); :}
	    |
        /* empty list */
	    {: RESULT = new MemberList(getCurrLineNum()); :}
	;

/* a member */
member
    ::=
        field:f
        {: RESULT = f; :}
        |
        stmt:m
        {: RESULT = m; :}
    ;

/* a single field */
field
    ::=
        /* a field with stmt */
        const_var:name ASSIGN expr:exp SEMI
        {: RESULT = new Field(name.getLineNum(),
                                  name.getConstant(), exp ); :}
     ;

/* statements */
stmt
    ::=
    loop_stmt:s
    {: RESULT = s; :}
    |
    phrase_stmt:s
        {: RESULT = s; :}
        |
    call_stmt:s
        {: RESULT = s; :}
        |
    block_stmt:s
         {: RESULT = s; :}
     ;

/* a call statement */
call_stmt
    ::=
        /* a totally normal call statement */
        expr:e SEMI
        {: RESULT = new CallStmt(e.getLineNum(), e); :}
    ;
loop_stmt
    ::=
        /* normal loop statement */
        LOOP expr:c LBRACE stmt_list:sl RBRACE
        {: RESULT = new LoopStmt(c.getLineNum(), sl, c); :}
     ;

block_stmt
      ::=
         /* normal block statement */
         LSQBRACE expr_list:sl RSQBRACE SEMI
         {: RESULT = new BlockStmt(sl.getLineNum(), sl); :}
      ;

stmt_list
    ::=
        /* single statement */
        stmt:s
	    {: RESULT = (StmtList)(new StmtList(s.getLineNum()).addElement(s)); :}
	    |
	    /* multiple statements */
	    stmt_list:st stmt:s
	    {: RESULT = (StmtList)st.addElement(s); :}
	    |
        /* empty list */
	    {: RESULT = new StmtList(getCurrLineNum()); :}
	;

expr
    ::=
    phrase_expr:e
        {: RESULT = e; :}
    |
    const_expr:e
        {: RESULT = e; :}
    ;

expr_list
    ::=
        /* single statement */
        expr:e
        {: RESULT = (ExprList)(new ExprList(e.getLineNum()).addElement(e)); :}
        |
        /* multiple statements */
        expr_list:el COMMA expr:e
        {: RESULT = (ExprList)el.addElement(e); :}
        |
        /* empty list */
        {: RESULT = new ExprList(getCurrLineNum()); :}
    ;

phrase_expr
    ::=
        /* empty attributes */
        measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), null,null,null,ml); :}
        |

        /* with instrument */
        INSTRUMENT const_expr:i measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), i,null,null,ml); :}
        |
        /* with instrument + octave */
        INSTRUMENT const_expr:i OCTAVE const_expr:o measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), i,o,null,ml); :}
        |
        /* with instrument + octave + volume*/
        INSTRUMENT const_expr:i OCTAVE const_expr:o VOLUME const_expr:v measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), i,o,v, ml); :}
        |
        /* with instrument + volume */
        INSTRUMENT const_expr:i VOLUME const_expr:v measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), i,null,v, ml); :}
        |
        /* with instrument + volume + octave */
        INSTRUMENT const_expr:i VOLUME const_expr:v OCTAVE const_expr:o measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), i,o,v, ml); :}
        |

        /* with octave */
        OCTAVE const_expr:o measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), null,o,null, ml); :}
        |
        /* with octave + instrument*/
        OCTAVE const_expr:o INSTRUMENT const_expr:i measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), i,o,null, ml); :}
        |
        /* with octave + instrument + volume*/
        OCTAVE const_expr:o INSTRUMENT const_expr:i VOLUME const_expr:v measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), i,o,v, ml); :}
        |
        /* with octave + volume */
        OCTAVE const_expr:o VOLUME const_expr:v measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), null,o,v, ml); :}
        |
        /* with octave + volume + instrument */
        OCTAVE const_expr:o VOLUME const_expr:v INSTRUMENT const_expr:i measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), i,o,v, ml); :}
        |

        /* with volume */
        VOLUME const_expr:v measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), null,null,v, ml); :}
        |
        /* with volume + instrument*/
        VOLUME const_expr:v INSTRUMENT const_expr:i measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), i,null,v, ml); :}
        |
        /* with octave + instrument + volume*/
        VOLUME const_expr:v INSTRUMENT const_expr:i OCTAVE const_expr:o measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), i,o,v, ml); :}
        |
        /* with volume + octave  */
        VOLUME const_expr:v OCTAVE const_expr:o measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), null,o,v, ml); :}
        |
        /* with volume + octave + instrument */
        VOLUME const_expr:v OCTAVE const_expr:o INSTRUMENT const_expr:i measure_list:ml
        {: RESULT = new PhraseExpr(ml.getLineNum(), i,o,v, ml); :}
    ;

measure_list
    ::=
        /* single measure */
        measure:m
	    {: RESULT = (MeasureList)(new MeasureList(m.getLineNum()).addElement(m)); :}
	    |
	    /* multiple measures */
	    measure_list:ml measure:m
	    {: RESULT = (MeasureList)ml.addElement(m); :}
	    |
        /* empty list */
	    {: RESULT = new MeasureList(getCurrLineNum()); :}
	;

measure
    ::=
        LBREAK sound_list:sl RBREAK
        {: RESULT = new Measure(sl.getLineNum(), sl); :}
    ;

sound_list
    ::=
        /* single sound */
        sound:s
	    {: RESULT = (SoundList)(new SoundList(s.getLineNum()).addElement(s)); :}
	    |
	    /* multiple sounds */
	    sound_list:sl sound:s
	    {: RESULT = (SoundList)sl.addElement(s); :}
	    |
        /* empty list */
	    {: RESULT = new SoundList(getCurrLineNum()); :}
	;

sound
    ::=
        chord:c
        {: RESULT = c; :}
        |
        note:n
        {: RESULT = n; :}
    ;

chord
    ::=
        LPAREN sound_list:sl RPAREN
        {: RESULT = new Chord(sl.getLineNum(), sl); :}
    ;

note
    ::=
        NOTE:n BREAK const_expr:e
        {: RESULT = new Note(n.getLineNum(), n.getAttribute(), null, (ConstExpr)e); :}
        |
        NOTE:n PLUS BREAK const_expr:e
        {: RESULT = new Note(n.getLineNum(), n.getAttribute(), "+", (ConstExpr)e); :}
        |
        NOTE:n MINUS BREAK const_expr:e
        {: RESULT = new Note(n.getLineNum(), n.getAttribute(), "-", (ConstExpr)e); :}
        |
        NOTE:n
        {: RESULT = new Note(n.getLineNum(), n.getAttribute(), null); :}
        |
        NOTE:n PLUS
        {: RESULT = new Note(n.getLineNum(), n.getAttribute(), "+"); :}
        |
        NOTE:n MINUS
        {: RESULT = new Note(n.getLineNum(), n.getAttribute(), "-"); :}
    ;

const_expr
    ::=
        const_int:i
        {: RESULT = i; :}
        |
        const_var:i
                {: RESULT = i; :}
        |
        const_string:i
                {: RESULT = i; :}
     ;

const_var
    ::=
        ID:id
        {: RESULT = new ConstVarExpr(
                            id.getLineNum(),
                            id.getAttribute());
        :}
    ;

const_int
      ::=
          INT_CONST:value
          {: RESULT = new ConstIntExpr(value.getLineNum(), value.getAttribute()); :}
          |
          MINUS:m INT_CONST:value
          {: RESULT = new ConstIntExpr(value.getLineNum(), "-" + value.getAttribute()); :}
          |
          PLUS:p INT_CONST:value
          {: RESULT = new ConstIntExpr(value.getLineNum(), "+" + value.getAttribute()); :}
      ;

const_string
      ::=
          STRING_CONST:value
          {: RESULT = new ConstStringExpr(value.getLineNum(), value.getAttribute()); :}
      ;
