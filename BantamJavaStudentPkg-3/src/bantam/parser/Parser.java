
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Apr 27 21:36:30 EDT 2017
//----------------------------------------------------

package bantam.parser;

import bantam.lexer.*;
import bantam.mast.*;
import bantam.util.ErrorHandler;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Thu Apr 27 21:36:30 EDT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\003\003\000\002\002\004\000\002\004" +
    "\007\000\002\005\003\000\002\005\004\000\002\005\002" +
    "\000\002\006\003\000\002\006\003\000\002\007\006\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\014\004\000\002\012\007\000\002\013" +
    "\004\000\002\015\006\000\002\010\003\000\002\010\004" +
    "\000\002\010\002\000\002\027\003\000\002\027\003\000" +
    "\002\026\003\000\002\026\005\000\002\026\002\000\002" +
    "\031\003\000\002\031\005\000\002\031\007\000\002\031" +
    "\011\000\002\031\007\000\002\031\011\000\002\031\005" +
    "\000\002\031\007\000\002\031\011\000\002\031\007\000" +
    "\002\031\011\000\002\031\005\000\002\031\007\000\002" +
    "\031\011\000\002\031\007\000\002\031\011\000\002\016" +
    "\003\000\002\016\004\000\002\016\002\000\002\017\005" +
    "\000\002\020\003\000\002\020\004\000\002\020\002\000" +
    "\002\021\003\000\002\021\003\000\002\023\005\000\002" +
    "\024\003\000\002\024\004\000\002\024\004\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\034\003" +
    "\000\002\032\003\000\002\032\004\000\002\032\004\000" +
    "\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\004\005\006\001\002\000\004\002\160\001" +
    "\002\000\004\002\001\001\002\000\004\030\007\001\002" +
    "\000\004\017\010\001\002\000\034\006\022\007\023\010" +
    "\024\011\020\012\017\013\033\020\ufffc\021\030\023\031" +
    "\024\ufffc\026\025\027\026\030\013\001\002\000\014\017" +
    "\uffe8\022\uffe8\023\031\024\uffe8\025\uffe8\001\002\000\034" +
    "\006\022\007\023\010\024\011\020\012\017\013\033\020" +
    "\157\021\030\023\031\024\uffd6\026\025\027\026\030\013" +
    "\001\002\000\022\007\uffc4\010\uffc4\011\uffc4\017\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\001\002\000\034\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\020\ufffe\021" +
    "\ufffe\023\ufffe\024\ufffe\026\ufffe\027\ufffe\030\ufffe\001\002" +
    "\000\034\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\020\ufffb\021\ufffb\023\ufffb\024\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\001\002\000\004\024\155\001\002\000\004\027" +
    "\154\001\002\000\014\012\017\013\033\026\025\027\026" +
    "\030\013\001\002\000\014\017\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\001\002\000\026\007\023\010\024\011\020" +
    "\012\017\013\033\017\uffd6\023\031\026\025\027\026\030" +
    "\013\001\002\000\014\012\017\013\033\026\025\027\026" +
    "\030\013\001\002\000\014\012\017\013\033\026\025\027" +
    "\026\030\013\001\002\000\024\007\uffc8\010\uffc8\011\uffc8" +
    "\014\uffc8\017\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\001" +
    "\002\000\022\007\uffc7\010\uffc7\011\uffc7\017\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\001\002\000\034\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\020\ufff8\021\ufff8" +
    "\023\ufff8\024\ufff8\026\ufff8\027\ufff8\030\ufff8\001\002\000" +
    "\030\007\023\010\024\011\020\012\017\013\033\022\uffe9" +
    "\023\031\025\uffe9\026\025\027\026\030\013\001\002\000" +
    "\010\015\053\023\uffd2\031\056\001\002\000\006\014\045" +
    "\024\uffca\001\002\000\004\027\044\001\002\000\034\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\020\ufff5" +
    "\021\ufff5\023\ufff5\024\ufff5\026\ufff5\027\ufff5\030\ufff5\001" +
    "\002\000\034\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\001\002\000\022\007\uffcb\010\uffcb\011\uffcb" +
    "\017\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\001\002\000" +
    "\034\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\020\ufff6\021\ufff6\023\ufff6\024\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\001\002\000\012\017\uffec\022\uffec\024\uffec\025\uffec" +
    "\001\002\000\034\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\020\ufffa\021\ufffa\023\ufffa\024\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\001\002\000\022\007\uffc9\010\uffc9\011" +
    "\uffc9\017\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\001\002" +
    "\000\012\017\uffed\022\uffed\024\uffed\025\uffed\001\002\000" +
    "\022\007\uffc6\010\uffc6\011\uffc6\017\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\001\002\000\026\007\023\010\024\011" +
    "\020\012\017\013\033\023\031\024\uffd6\026\025\027\026" +
    "\030\013\001\002\000\004\024\050\001\002\000\022\007" +
    "\uffca\010\uffca\011\uffca\017\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\001\002\000\034\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\020\ufff9\021\ufff9\023\ufff9\024\ufff9" +
    "\026\ufff9\027\ufff9\030\ufff9\001\002\000\010\015\053\023" +
    "\064\031\056\001\002\000\012\015\uffd0\016\uffd0\023\uffd0" +
    "\031\uffd0\001\002\000\010\015\053\016\uffd2\031\056\001" +
    "\002\000\012\015\uffd4\016\uffd4\023\uffd4\031\uffd4\001\002" +
    "\000\012\015\uffd1\016\uffd1\023\uffd1\031\uffd1\001\002\000" +
    "\016\012\057\013\060\015\uffce\016\uffce\023\uffce\031\uffce" +
    "\001\002\000\012\015\uffcd\016\uffcd\023\uffcd\031\uffcd\001" +
    "\002\000\012\015\uffcc\016\uffcc\023\uffcc\031\uffcc\001\002" +
    "\000\010\015\053\016\062\031\056\001\002\000\012\015" +
    "\uffcf\016\uffcf\023\uffcf\031\uffcf\001\002\000\012\015\uffd3" +
    "\016\uffd3\023\uffd3\031\uffd3\001\002\000\014\017\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\001\002\000\006\022\uffeb" +
    "\025\uffeb\001\002\000\006\022\067\025\070\001\002\000" +
    "\004\024\072\001\002\000\030\007\023\010\024\011\020" +
    "\012\017\013\033\022\uffd6\023\031\025\uffd6\026\025\027" +
    "\026\030\013\001\002\000\006\022\uffea\025\uffea\001\002" +
    "\000\034\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\020\ufff1\021\ufff1\023\ufff1\024\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\001\002\000\020\007\076\011\075\017\uffd6\022" +
    "\uffd6\023\031\024\uffd6\025\uffd6\001\002\000\014\017\uffdd" +
    "\022\uffdd\023\031\024\uffdd\025\uffdd\001\002\000\014\012" +
    "\017\013\033\026\025\027\026\030\013\001\002\000\014" +
    "\012\017\013\033\026\025\027\026\030\013\001\002\000" +
    "\016\011\101\017\uffd6\022\uffd6\023\031\024\uffd6\025\uffd6" +
    "\001\002\000\014\017\uffdc\022\uffdc\023\031\024\uffdc\025" +
    "\uffdc\001\002\000\014\012\017\013\033\026\025\027\026" +
    "\030\013\001\002\000\014\017\uffd6\022\uffd6\023\031\024" +
    "\uffd6\025\uffd6\001\002\000\014\017\uffdb\022\uffdb\023\031" +
    "\024\uffdb\025\uffdb\001\002\000\014\017\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\001\002\000\016\007\107\017\uffd6" +
    "\022\uffd6\023\031\024\uffd6\025\uffd6\001\002\000\014\017" +
    "\uffda\022\uffda\023\031\024\uffda\025\uffda\001\002\000\014" +
    "\012\017\013\033\026\025\027\026\030\013\001\002\000" +
    "\014\017\uffd6\022\uffd6\023\031\024\uffd6\025\uffd6\001\002" +
    "\000\014\017\uffd9\022\uffd9\023\031\024\uffd9\025\uffd9\001" +
    "\002\000\020\010\115\011\114\017\uffd6\022\uffd6\023\031" +
    "\024\uffd6\025\uffd6\001\002\000\014\017\uffe7\022\uffe7\023" +
    "\031\024\uffe7\025\uffe7\001\002\000\014\012\017\013\033" +
    "\026\025\027\026\030\013\001\002\000\014\012\017\013" +
    "\033\026\025\027\026\030\013\001\002\000\016\011\120" +
    "\017\uffd6\022\uffd6\023\031\024\uffd6\025\uffd6\001\002\000" +
    "\014\017\uffe4\022\uffe4\023\031\024\uffe4\025\uffe4\001\002" +
    "\000\014\012\017\013\033\026\025\027\026\030\013\001" +
    "\002\000\014\017\uffd6\022\uffd6\023\031\024\uffd6\025\uffd6" +
    "\001\002\000\014\017\uffe3\022\uffe3\023\031\024\uffe3\025" +
    "\uffe3\001\002\000\016\010\125\017\uffd6\022\uffd6\023\031" +
    "\024\uffd6\025\uffd6\001\002\000\014\017\uffe6\022\uffe6\023" +
    "\031\024\uffe6\025\uffe6\001\002\000\014\012\017\013\033" +
    "\026\025\027\026\030\013\001\002\000\014\017\uffd6\022" +
    "\uffd6\023\031\024\uffd6\025\uffd6\001\002\000\014\017\uffe5" +
    "\022\uffe5\023\031\024\uffe5\025\uffe5\001\002\000\004\017" +
    "\131\001\002\000\034\006\022\007\023\010\024\011\020" +
    "\012\017\013\033\020\uffee\021\030\023\031\024\uffee\026" +
    "\025\027\026\030\013\001\002\000\034\006\022\007\023" +
    "\010\024\011\020\012\017\013\033\020\134\021\030\023" +
    "\031\024\uffd6\026\025\027\026\030\013\001\002\000\034" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\020" +
    "\ufff0\021\ufff0\023\ufff0\024\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\001\002\000\034\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\020\ufff3\021\ufff3\023\ufff3\024\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\001\002\000\034\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\020\uffef\021\uffef\023\uffef" +
    "\024\uffef\026\uffef\027\uffef\030\uffef\001\002\000\020\007" +
    "\141\010\140\017\uffd6\022\uffd6\023\031\024\uffd6\025\uffd6" +
    "\001\002\000\014\017\uffe2\022\uffe2\023\031\024\uffe2\025" +
    "\uffe2\001\002\000\014\012\017\013\033\026\025\027\026" +
    "\030\013\001\002\000\014\012\017\013\033\026\025\027" +
    "\026\030\013\001\002\000\016\010\144\017\uffd6\022\uffd6" +
    "\023\031\024\uffd6\025\uffd6\001\002\000\014\017\uffe1\022" +
    "\uffe1\023\031\024\uffe1\025\uffe1\001\002\000\014\012\017" +
    "\013\033\026\025\027\026\030\013\001\002\000\014\017" +
    "\uffd6\022\uffd6\023\031\024\uffd6\025\uffd6\001\002\000\014" +
    "\017\uffe0\022\uffe0\023\031\024\uffe0\025\uffe0\001\002\000" +
    "\016\007\151\017\uffd6\022\uffd6\023\031\024\uffd6\025\uffd6" +
    "\001\002\000\014\017\uffdf\022\uffdf\023\031\024\uffdf\025" +
    "\uffdf\001\002\000\014\012\017\013\033\026\025\027\026" +
    "\030\013\001\002\000\014\017\uffd6\022\uffd6\023\031\024" +
    "\uffd6\025\uffd6\001\002\000\014\017\uffde\022\uffde\023\031" +
    "\024\uffde\025\uffde\001\002\000\022\007\uffc5\010\uffc5\011" +
    "\uffc5\017\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\001\002" +
    "\000\034\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\020\ufff4\021\ufff4\023\ufff4\024\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\001\002\000\034\006\ufffd\007\ufffd\010\ufffd\011" +
    "\ufffd\012\ufffd\013\ufffd\020\ufffd\021\ufffd\023\ufffd\024\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\011\006\013\007\014\011\040\012\026\013" +
    "\034\014\036\015\033\016\010\017\020\027\015\030\037" +
    "\031\042\032\035\033\041\034\031\001\001\000\004\017" +
    "\103\001\001\000\040\006\155\007\014\011\040\012\026" +
    "\013\034\014\036\015\033\016\010\017\020\027\015\030" +
    "\037\031\042\032\035\033\041\034\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\135\032\035\033\041" +
    "\034\046\001\001\000\002\001\001\000\022\016\010\017" +
    "\020\027\127\030\037\031\042\032\035\033\041\034\046" +
    "\001\001\000\012\030\111\032\035\033\041\034\046\001" +
    "\001\000\012\030\072\032\035\033\041\034\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\016\010\017\020\026\065\027\064\030\037\031\042" +
    "\032\035\033\041\034\046\001\001\000\012\020\050\021" +
    "\053\023\054\024\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\010\017\020\027\045\030\037\031\042\032\035" +
    "\033\041\034\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\062\023\054\024\051" +
    "\001\001\000\002\001\001\000\012\020\060\021\053\023" +
    "\054\024\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\062\023\054\024\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\010\017\020" +
    "\027\070\030\037\031\042\032\035\033\041\034\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\073" +
    "\017\020\001\001\000\004\017\103\001\001\000\012\030" +
    "\104\032\035\033\041\034\046\001\001\000\012\030\076" +
    "\032\035\033\041\034\046\001\001\000\006\016\077\017" +
    "\020\001\001\000\004\017\103\001\001\000\012\030\101" +
    "\032\035\033\041\034\046\001\001\000\006\016\102\017" +
    "\020\001\001\000\004\017\103\001\001\000\002\001\001" +
    "\000\006\016\105\017\020\001\001\000\004\017\103\001" +
    "\001\000\012\030\107\032\035\033\041\034\046\001\001" +
    "\000\006\016\110\017\020\001\001\000\004\017\103\001" +
    "\001\000\006\016\112\017\020\001\001\000\004\017\103" +
    "\001\001\000\012\030\122\032\035\033\041\034\046\001" +
    "\001\000\012\030\115\032\035\033\041\034\046\001\001" +
    "\000\006\016\116\017\020\001\001\000\004\017\103\001" +
    "\001\000\012\030\120\032\035\033\041\034\046\001\001" +
    "\000\006\016\121\017\020\001\001\000\004\017\103\001" +
    "\001\000\006\016\123\017\020\001\001\000\004\017\103" +
    "\001\001\000\012\030\125\032\035\033\041\034\046\001" +
    "\001\000\006\016\126\017\020\001\001\000\004\017\103" +
    "\001\001\000\002\001\001\000\036\010\131\011\132\012" +
    "\026\013\034\014\036\015\033\016\010\017\020\027\015" +
    "\030\037\031\042\032\035\033\041\034\046\001\001\000" +
    "\034\011\134\012\026\013\034\014\036\015\033\016\010" +
    "\017\020\027\015\030\037\031\042\032\035\033\041\034" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\136\017\020\001\001\000\004\017" +
    "\103\001\001\000\012\030\146\032\035\033\041\034\046" +
    "\001\001\000\012\030\141\032\035\033\041\034\046\001" +
    "\001\000\006\016\142\017\020\001\001\000\004\017\103" +
    "\001\001\000\012\030\144\032\035\033\041\034\046\001" +
    "\001\000\006\016\145\017\020\001\001\000\004\017\103" +
    "\001\001\000\006\016\147\017\020\001\001\000\004\017" +
    "\103\001\001\000\012\030\151\032\035\033\041\034\046" +
    "\001\001\000\006\016\152\017\020\001\001\000\004\017" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * @return the ErrorHandler for this Parser
     */
    public ErrorHandler getErrorHandler() { return action_obj.getErrorHandler(); }

    /** overrides done_parsing in inherited class, called when parsing finishes
      * either after accepting or because of errors
      * */
    public void done_parsing() {
	super.done_parsing();
	// if lexing and/or parsing errors then exit
	action_obj.getErrorHandler().checkErrors();
    }

    /**
     * Generates an appropriate error message based on the
     * input error type
     * @param t the relevant error Token
     */
    private String generateErrorMessage(Token t) {
        String errorMessage = "";
        switch(t.getName()) {
            case "UNTERMINATED_COMMENT":
                errorMessage = "unterminated comment detected";
            case "LARGE_INT":
                errorMessage = (
                    "int value " + t.getAttribute() + "is too large. Bantam Java only " +
                    "supports integers of size 2147483647 (2^32 - 1) or less"
                );
            case "ILLEGAL_ID":
                errorMessage = "illegal id '" + t.getAttribute() + "'";
            case "LARGE_STRING":
                errorMessage = (
                    "Bantam Java Strings cannot exceed 5000 chars." +
                    "Found string of size: " + t.getAttribute()
                );
            case "ILLEGAL_ESCAPE_CHAR":
                errorMessage = "illegal escape char: '" + t.getAttribute() + "'";
            case "MULTILINE_STRING":
                errorMessage = "multiline string detected";
            case "UNTERMINATED_STRING":
                errorMessage = "unterminated string: '" + t.getAttribute() + "'";
            case "ILLEGAL_CHAR":
                errorMessage = "illegal char: '" + t.getAttribute() + "'";
        }
        return errorMessage;
    }

    /** overrides syntax_error in inherited class and handles syntax errors 
      * @param curr current symbol from the bantam.lexer
      * */
    public void syntax_error(Symbol curr) {
	// get token value from the symbol
	Token t = (Token)curr.value;
	
	// get the error handler object
	ErrorHandler errorHandler = action_obj.getErrorHandler();

	// may want to modify and augment the code below for more
	// accurate error reporting
	errorHandler.register(errorHandler.PARSE_ERROR, action_obj.getCurrFilename(), 
			      action_obj.getCurrLineNum(), 
			      "unexpected input near '" + t.getLexeme() + "'");

    // handle lexer errors
    // TODO figure out why "EOF" is detected as a LEX_ERROR whenever any error occurs
    if(t.getName() != "EOF") {
        errorHandler.register(errorHandler.LEX_ERROR, action_obj.getCurrFilename(),
    			      action_obj.getCurrLineNum(),
    			      generateErrorMessage(t));
        }
    }

    /** override error_sync_size in inherited class and
      * change the minimum number of tokens to skip on an error from 3 to 2
      * @return minimum number of tokens to skip on an error
      * */
    protected int error_sync_size() {
	return 2;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {

 
    /** object for error handling */
    private ErrorHandler errorHandler = new ErrorHandler();

    /* sets the error handler */
    public ErrorHandler getErrorHandler() {
	return errorHandler;
    }

    /* returns the current line number from the scanner */
    public int getCurrLineNum() {
	return ((Lexer)parser.getScanner()).getCurrLineNum();
    }

    /* returns the current file name from the scanner */
    public String getCurrFilename() {
	return ((Lexer)parser.getScanner()).getCurrFilename();
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // const_string ::= STRING_CONST 
            {
              ConstExpr RESULT = null;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ConstStringExpr(value.getLineNum(), value.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*const_string*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // const_int ::= PLUS INT_CONST 
            {
              ConstExpr RESULT = null;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ConstIntExpr(value.getLineNum(), p.getAttribute() + value.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*const_int*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // const_int ::= MINUS INT_CONST 
            {
              ConstExpr RESULT = null;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ConstIntExpr(value.getLineNum(), m.getAttribute() + value.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*const_int*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // const_int ::= INT_CONST 
            {
              ConstExpr RESULT = null;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ConstIntExpr(value.getLineNum(), value.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*const_int*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // const_var ::= ID 
            {
              ConstExpr RESULT = null;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ConstVarExpr(
                            id.getLineNum(),
                            id.getAttribute());
        
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*const_var*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // const_expr ::= const_string 
            {
              Expr RESULT = null;
		ConstExpr i = (ConstExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = i; 
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*const_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // const_expr ::= const_var 
            {
              Expr RESULT = null;
		ConstExpr i = (ConstExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = i; 
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*const_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // const_expr ::= const_int 
            {
              Expr RESULT = null;
		ConstExpr i = (ConstExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = i; 
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*const_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // note ::= NOTE MINUS 
            {
              Note RESULT = null;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Note(n.getLineNum(), n.getAttribute(), m.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*note*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // note ::= NOTE PLUS 
            {
              Note RESULT = null;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Note(n.getLineNum(), n.getAttribute(), p.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*note*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // note ::= NOTE 
            {
              Note RESULT = null;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Note(n.getLineNum(), n.getAttribute(), null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*note*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // chord ::= LPAREN sound_list RPAREN 
            {
              Chord RESULT = null;
		SoundList sl = (SoundList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Chord(sl.getLineNum(), sl); 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*chord*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sound ::= note 
            {
              Sound RESULT = null;
		Note n = (Note)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = n; 
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*sound*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sound ::= chord 
            {
              Sound RESULT = null;
		Chord c = (Chord)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = c; 
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*sound*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sound_list ::= 
            {
              SoundList RESULT = null;
		 RESULT = new SoundList(getCurrLineNum()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*sound_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sound_list ::= sound_list sound 
            {
              SoundList RESULT = null;
		SoundList sl = (SoundList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Sound s = (Sound)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (SoundList)sl.addElement(s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*sound_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sound_list ::= sound 
            {
              SoundList RESULT = null;
		Sound s = (Sound)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (SoundList)(new SoundList(s.getLineNum()).addElement(s)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*sound_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // measure ::= BREAK sound_list BREAK 
            {
              Measure RESULT = null;
		SoundList sl = (SoundList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Measure(sl.getLineNum(), sl); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*measure*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // measure_list ::= 
            {
              MeasureList RESULT = null;
		 RESULT = new MeasureList(getCurrLineNum()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*measure_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // measure_list ::= measure_list measure 
            {
              MeasureList RESULT = null;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Measure m = (Measure)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (MeasureList)ml.addElement(m); 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*measure_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // measure_list ::= measure 
            {
              MeasureList RESULT = null;
		Measure m = (Measure)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (MeasureList)(new MeasureList(m.getLineNum()).addElement(m)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*measure_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // phrase_expr ::= VOLUME const_expr OCTAVE const_expr INSTRUMENT const_expr measure_list 
            {
              Expr RESULT = null;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), i,o,v, ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // phrase_expr ::= VOLUME const_expr OCTAVE const_expr measure_list 
            {
              Expr RESULT = null;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), null,o,v, ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // phrase_expr ::= VOLUME const_expr INSTRUMENT const_expr OCTAVE const_expr measure_list 
            {
              Expr RESULT = null;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), i,o,v, ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // phrase_expr ::= VOLUME const_expr INSTRUMENT const_expr measure_list 
            {
              Expr RESULT = null;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), i,null,v, ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // phrase_expr ::= VOLUME const_expr measure_list 
            {
              Expr RESULT = null;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), null,null,v, ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // phrase_expr ::= OCTAVE const_expr VOLUME const_expr INSTRUMENT const_expr measure_list 
            {
              Expr RESULT = null;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), i,o,v, ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // phrase_expr ::= OCTAVE const_expr VOLUME const_expr measure_list 
            {
              Expr RESULT = null;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), null,o,v, ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // phrase_expr ::= OCTAVE const_expr INSTRUMENT const_expr VOLUME const_expr measure_list 
            {
              Expr RESULT = null;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), i,o,v, ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // phrase_expr ::= OCTAVE const_expr INSTRUMENT const_expr measure_list 
            {
              Expr RESULT = null;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), i,o,null, ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // phrase_expr ::= OCTAVE const_expr measure_list 
            {
              Expr RESULT = null;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), null,o,null, ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // phrase_expr ::= INSTRUMENT const_expr VOLUME const_expr OCTAVE const_expr measure_list 
            {
              Expr RESULT = null;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), i,o,v, ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // phrase_expr ::= INSTRUMENT const_expr VOLUME const_expr measure_list 
            {
              Expr RESULT = null;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), i,null,v, ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // phrase_expr ::= INSTRUMENT const_expr OCTAVE const_expr VOLUME const_expr measure_list 
            {
              Expr RESULT = null;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), i,o,v, ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // phrase_expr ::= INSTRUMENT const_expr OCTAVE const_expr measure_list 
            {
              Expr RESULT = null;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), i,o,null,ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // phrase_expr ::= INSTRUMENT const_expr measure_list 
            {
              Expr RESULT = null;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), i,null,null,ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // phrase_expr ::= measure_list 
            {
              Expr RESULT = null;
		MeasureList ml = (MeasureList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PhraseExpr(ml.getLineNum(), null,null,null,ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*phrase_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr_list ::= 
            {
              ExprList RESULT = null;
		 RESULT = new ExprList(getCurrLineNum()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*expr_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr_list ::= expr_list COMMA expr 
            {
              ExprList RESULT = null;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (ExprList)el.addElement(e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*expr_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr_list ::= expr 
            {
              ExprList RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (ExprList)(new ExprList(e.getLineNum()).addElement(e)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*expr_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= const_expr 
            {
              Expr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= phrase_expr 
            {
              Expr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt_list ::= 
            {
              StmtList RESULT = null;
		 RESULT = new StmtList(getCurrLineNum()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*stmt_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt_list ::= stmt_list stmt 
            {
              StmtList RESULT = null;
		StmtList st = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (StmtList)st.addElement(s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*stmt_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt_list ::= stmt 
            {
              StmtList RESULT = null;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (StmtList)(new StmtList(s.getLineNum()).addElement(s)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*stmt_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // block_stmt ::= LSQBRACE expr_list RSQBRACE SEMI 
            {
              Stmt RESULT = null;
		ExprList sl = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new BlockStmt(sl.getLineNum(), sl); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*block_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // phrase_stmt ::= expr SEMI 
            {
              Stmt RESULT = null;
		Expr pe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PhraseStmt(pe.getLineNum(), pe); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*phrase_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // loop_stmt ::= LOOP expr LBRACE stmt_list RBRACE 
            {
              Stmt RESULT = null;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LoopStmt(c.getLineNum(), sl, c); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*loop_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // call_stmt ::= expr SEMI 
            {
              Stmt RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallStmt(e.getLineNum(), e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*call_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= block_stmt 
            {
              Stmt RESULT = null;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= call_stmt 
            {
              Stmt RESULT = null;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= phrase_stmt 
            {
              Stmt RESULT = null;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= loop_stmt 
            {
              Stmt RESULT = null;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field ::= const_var ASSIGN expr SEMI 
            {
              Field RESULT = null;
		ConstExpr name = (ConstExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr exp = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Field(name.getLineNum(),
                                  name.getConstant(), exp ); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*field*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // member ::= stmt 
            {
              Member RESULT = null;
		Stmt m = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = m; 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*member*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // member ::= field 
            {
              Member RESULT = null;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = f; 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*member*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // member_list ::= 
            {
              MemberList RESULT = null;
		 RESULT = new MemberList(getCurrLineNum()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*member_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // member_list ::= member_list member 
            {
              MemberList RESULT = null;
		MemberList ml = (MemberList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Member m = (Member)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (MemberList)ml.addElement(m); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*member_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // member_list ::= member 
            {
              MemberList RESULT = null;
		Member m = (Member)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (MemberList)(new MemberList(m.getLineNum()).addElement(m)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*member_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // score ::= SCORE STRING_CONST LBRACE member_list RBRACE 
            {
              Score RESULT = null;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		MemberList ml = (MemberList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Score(t.getLineNum(), getCurrFilename(),
				   name.getAttribute(), ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*score*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= score 
            {
              Program RESULT = null;
		Score sc = (Score)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Program(0, sc); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*program*/, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

